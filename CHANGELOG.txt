*****  Sun May 28 23:48:48 CEST 2017  *****

Calling sequence:
  ./pup.py pup.cfg

This seems to be anough.  All required info can be contained into the
pup.cfg file, including what steps to run, and over which folders.

Main steps:
+ load
+ badpixel
- centering
- photometry
- modeling
- mcmc


centering:
- run_centering
    driver: load files, launch runs (series)
- centering
    main: 
- do_center
    low level centering
- centerdriver

TBD centering:
- read in data, mask, uncert


*****  Sat Aug 19 20:19:37 CEST 2017  *****

Let's make puppies work.
puppies must work from the command line or from an interactive session:

## Interactive:
import puppies as p

# New puppy:
pup = p.init("cfile.cfg")

# New step:
pup.badpix()
pup.center()

# Load:
pup = p.io.load(path + "wa043b.p")

## Command line:
  TBD

On now puppy, take the location of the config file as the root where
to place the outputs.

*****

repository structure (so far):
puppies
|--puppies
|  |--tools
|  |--stats
|  |--lib
|  |--image
|  `--io
|--examples
|--inputs
|--src_c
|--modules
`--docs

*****

Got a basic package import working, and interactive init() running.
Added required files.
Need to find a solution for all_spitzer.vec (file too large),
download during 'make'?


*****  Sun Aug 20 22:26:40 CEST 2017  *****

Moved getpar() from spitzer.py to tools.

*****

Got badpix working.
Added pup_badpix.py and stats module.


*****  Sun Sep  3 20:09:46 CEST 2017  *****

Implemented disk routine for Python and C.

*****

Implemented imedit.py, tied together with disk.py into image
module.


*****  Sun Sep 24 18:51:34 CEST 2017  *****

Implemented gaussian functions into center module.
TBD: give them their own submodule inside the center module.


*****  Mon Sep 25 23:09:32 CEST 2017  *****

Implemented least-asymetry routines into center module.


*****  Tue Sep 26 21:01:11 CEST 2017  *****

Cleaned up the disk.py and cdisk.c functions.


*****  Sun Oct  1 15:04:01 CEST 2017  *****

Sorted up gaussian, made it its own module inside the center module.

*****

Implemented center-of-light calculation into center module.

*****

Implemented center driver.py routine.


*****  Sun Oct  8 22:55:49 CEST 2017  *****

Got pup_center running (yay!).
Added temporary calling sequence to pup_center.
Fixed minor bug in center/driver.py for least-asym calls.
Tweaked main driver (removed parse() def).
Put user-input dict (from config files) into pup.inputs.


*****  Sat Oct 21 18:56:15 CEST 2017  *****

Rewrote disk C extension, moving most of the work into the cdisk.h
header, such it can be called from other C extentions.


*****  Fr 27. Okt 17:23:32 CEST 2017  *****

Implemented and documented the low-level aperture photometry routine
in aphot.c (a C extension).

*****

Incorporated aperture photometry in the puppies.photometry submodule.


*****  Sun Oct 29 17:05:52 CET 2017  *****

Implemented aperture photometry module.
Optimal photometry is TBI.

*****

Renamed centering's expand input to psfscale (pixel scale ratio
between the PSF and data images) to avoid conflict with photometry's
expand interpolating factor.


*****  Sat Nov  4 11:59:41 CET 2017  *****

Added some extra information about the Spitzer bad-pixel-mask bits,
still not completely sure it's the right one.


*****  Sun Nov 12 20:47:00 CET 2017  *****

Revampled spitzer.py to handle time stamps with astropy.time objects
for the ephtime and fp.time values.  This simplifies the light
travel time corrections, bjd-utc corrections, phase calculation.
The pipeline now takes the spacecraft location from the headers
instead of the horizons file.
All of these calculation are now in Spitzer.py rather than after
the photometry step.

Also, revamped the main object's FrameParameter from 2D into 1D.
This commit breaks all further steps of the pipeline.


*****  Sat Nov 18 22:09:59 CET 2017  *****

Adapted pup_badpix.py to the new data shape.

*****

Adapted pup_centering.py to the new data shape.


*****  Sun Nov 26 11:29:16 CET 2017  *****

Moved telemetry frame parameters into its own subclass.

*****

Adapted pup_photom.py to the new data shape.

*****

Added new plots module, to make plots (duh!).
Implemented YX plot vs. phase for centering.

*****

Added stats calculations at the end of pup_centering.py to print
means, median, std, and RMS.  Also make yx plots.


*****  Sun Dec 10 16:29:52 CET 2017  *****

Added MC3 submodule.

*****

Added background() and rawflux() to plots module.
Generate raw flux and background plots at the end of pup_photom.py.


*****  Sun Jan 28 17:56:23 CET 2018  *****

Added models module with lightcurve models.
Added linramp(), mandelecl(), and bliss() light-curve models.
TBD: Need to doublecheck bliss model works.


*****  So 18. Feb 18:21:45 CET 2018  *****

Implemented linramp, quadramp, expramp, mandelecl, mandeltr, and bliss
light-curve models.

*****

Added tools.cat(), a shorthand for numpy concatenate.
Removed tools.parray().

*****

Added parse.py file which implements tools.parse_model() to handle the
light-cruve modeling configuration files.
It also implements tools.parray().

*****

Added paramedit.py which implements tools.loadparams() to read-in
light-curve model parameters, bounds, and stepsizes.

*****

Added pup_model.py which implements the Model() and Fit() clasess
(for light-curve modeling).  It also implements the puppies.setup()
method, which prepares the code for a light-curve fitting/posterior
sampling.

TBI in this file: the fit() and mcmc() methods, which do the
least-square optimization and posterior sampling of the light-curve
modeling.


*****  So 25. Feb 18:54:17 CET 2018  *****

Implemented pup_model.fit(). Need to tie some loose ends (write file,
output, pickle file).
Sorted out variables in pup_model.setup().
Cleaned up pup_model.evalmodel().
Enabled chiscale and optimizer arguments for light-curve modeling.

*****

Implemented sigrej at the begining of pup_model.setup().
Need to think what to do if the data veries significantly from stat to
end, messing up the sigma rejection (do piecewise?, what's a good
recipe for this).
Also could do a sigrej from the residuals, after an initial fit
(consider if fit fails, it may mess up things as well).


*****  Sun Apr  8 20:01:23 CEST 2018  *****

Implemented newparams() and saveparams() in puppies.tool submodule.
This let's the user create a new modelparams file with default values
and to update an existing file with values from a Fit() object,
respectively.

*****

